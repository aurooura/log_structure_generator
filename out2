===============ARQUIVO.CPP ====================

#define ACTIVE_LOG_S200 1
#define AUX_LOG_S200 AP::logger().Write_setWindMagStateLearningMode200(\
	log_useAirspeed, \
	log_assume_zero_sideslip, \
	log_onGround, \
	log_PV_AidingMode, \
	log_inhibitWindStates, \
	log_yawAlignComplete, \
	log_useAirspeed, \
	log_accNavMagHoriz, \
	log_manoeuvring, \
	log_effective_magCal, \
	log_use_compass, \
	log_inhibitMagStates, \
	log_setMagInhibit, \
	log_magFieldLearned, \
	log_earthMagFieldVar_x)


#define ACTIVE_LOG_S201 1
#define AUX_LOG_S201 AP::logger().Write_setWindMagStateLearningMode201(\
	log_earthMagFieldVar_y, \
	log_earthMagFieldVar_z, \
	log_bodyMagFieldVar_x, \
	log_bodyMagFieldVar_y, \
	log_bodyMagFieldVar_z, \
	log_magStateInitComplete, \
	log_inFlight, \
	log_finalInflightYawInit, \
	log_stateIndexLim, \
	log_stateIndexLim2, \
	log_finalInflightMagInit, \
	log_tempEuler_x, \
	log_tempEuler_y, \
	log_tempEuler_z, \
	log_tasDataDelayed_tas)


#define ACTIVE_LOG_S202 1
#define AUX_LOG_S202 AP::logger().Write_setWindMagStateLearningMode202(\
	log_magCalRequested, \
	log_magCalDenied, \
	log_dtEkfAvg, \
	log_MagDeclination, \
	log_SumP, \
	log_SumPAfterDecl)


ATRIBUICAO PARA OS #if E #endif

	uint8_t log_useAirspeed = useAirspeed();
	uint8_t log_assume_zero_sideslip = assume_zero_sideslip();
	uint8_t log_onGround = onGround;
	int32_t log_PV_AidingMode = PV_AidingMode;
	uint8_t log_inhibitWindStates = inhibitWindStates;
	uint8_t log_yawAlignComplete = yawAlignComplete;
	uint8_t log_useAirspeed = useAirspeed;
	float log_accNavMagHoriz = accNavMagHoriz;
	uint8_t log_manoeuvring = manoeuvring;
	uint8_t log_effective_magCal = effective_magCal();
	uint8_t log_use_compass = use_compass();
	uint8_t log_inhibitMagStates = inhibitMagStates;
	uint8_t log_setMagInhibit = setMagInhibit;
	uint8_t log_magFieldLearned = magFieldLearned;
	float log_earthMagFieldVar_x = earthMagFieldVar.x;
	AUX_LOG_S200;

	float log_earthMagFieldVar_y = earthMagFieldVar.y;
	float log_earthMagFieldVar_z = earthMagFieldVar.z;
	float log_bodyMagFieldVar_x = bodyMagFieldVar.x;
	float log_bodyMagFieldVar_y = bodyMagFieldVar.y;
	float log_bodyMagFieldVar_z = bodyMagFieldVar.z;
	uint8_t log_magStateInitComplete = magStateInitComplete;
	uint8_t log_inFlight = inFlight;
	uint8_t log_finalInflightYawInit = finalInflightYawInit;
	int32_t log_stateIndexLim = stateIndexLim;
	int32_t log_stateIndexLim2 = stateIndexLim2;
	uint8_t log_finalInflightMagInit = finalInflightMagInit;
	float log_tempEuler_x = tempEuler.x;
	float log_tempEuler_y = tempEuler.y;
	float log_tempEuler_z = tempEuler.z;
	float log_tasDataDelayed_tas = tasDataDelayed.tas;
	AUX_LOG_S201;

	uint8_t log_magCalRequested = magCalRequested;
	uint8_t log_magCalDenied = magCalDenied;
	float log_dtEkfAvg = dtEkfAvg;
	float log_MagDeclination = MagDeclination();
	float log_SumP = SumP;
	float log_SumPAfterDecl = SumPAfterDecl;
	AUX_LOG_S202;



=============== XMOBOTS_LOGS.H ====================

#define LOG_S200_BASE(struct_enum)\
	{ (struct_enum), sizeof(log_S200), "S200",\
	"QBBBiBBBfBBBBBBf","t,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15","s---------------","F000000000000000"}

struct PACKED log_S200 {
	LOG_PACKET_HEADER;
	uint64_t time_us;
	uint8_t useAirspeed;
	uint8_t assume_zero_sideslip;
	uint8_t onGround;
	int32_t PV_AidingMode;
	uint8_t inhibitWindStates;
	uint8_t yawAlignComplete;
	uint8_t useAirspeed;
	float accNavMagHoriz;
	uint8_t manoeuvring;
	uint8_t effective_magCal;
	uint8_t use_compass;
	uint8_t inhibitMagStates;
	uint8_t setMagInhibit;
	uint8_t magFieldLearned;
	float earthMagFieldVar_x;
};

#define LOG_S201_BASE(struct_enum)\
	{ (struct_enum), sizeof(log_S201), "S201",\
	"QfffffBBBiiBffff","t,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15","s---------------","F000000000000000"}

struct PACKED log_S201 {
	LOG_PACKET_HEADER;
	uint64_t time_us;
	float earthMagFieldVar_y;
	float earthMagFieldVar_z;
	float bodyMagFieldVar_x;
	float bodyMagFieldVar_y;
	float bodyMagFieldVar_z;
	uint8_t magStateInitComplete;
	uint8_t inFlight;
	uint8_t finalInflightYawInit;
	int32_t stateIndexLim;
	int32_t stateIndexLim2;
	uint8_t finalInflightMagInit;
	float tempEuler_x;
	float tempEuler_y;
	float tempEuler_z;
	float tasDataDelayed_tas;
};

#define LOG_S202_BASE(struct_enum)\
	{ (struct_enum), sizeof(log_S202), "S202",\
	"QBBffff","t,1,2,3,4,5,6","s------","F000000"}

struct PACKED log_S202 {
	LOG_PACKET_HEADER;
	uint64_t time_us;
	uint8_t magCalRequested;
	uint8_t magCalDenied;
	float dtEkfAvg;
	float MagDeclination;
	float SumP;
	float SumPAfterDecl;
};

=============== AP_LOGGER_H====================

void Write_setWindMagStateLearningMode200(uint8_t useAirspeed,uint8_t assume_zero_sideslip,uint8_t onGround,int32_t PV_AidingMode,uint8_t inhibitWindStates,uint8_t yawAlignComplete,uint8_t useAirspeed,float accNavMagHoriz,uint8_t manoeuvring,uint8_t effective_magCal,uint8_t use_compass,uint8_t inhibitMagStates,uint8_t setMagInhibit,uint8_t magFieldLearned,float earthMagFieldVar_x);


void Write_setWindMagStateLearningMode201(float earthMagFieldVar_y,float earthMagFieldVar_z,float bodyMagFieldVar_x,float bodyMagFieldVar_y,float bodyMagFieldVar_z,uint8_t magStateInitComplete,uint8_t inFlight,uint8_t finalInflightYawInit,int32_t stateIndexLim,int32_t stateIndexLim2,uint8_t finalInflightMagInit,float tempEuler_x,float tempEuler_y,float tempEuler_z,float tasDataDelayed_tas);


void Write_setWindMagStateLearningMode202(uint8_t magCalRequested,uint8_t magCalDenied,float dtEkfAvg,float MagDeclination,float SumP,float SumPAfterDecl);


===============LOG_STRUCTURE.H=======================
NAO ESQUECER O SHOULD_LOG_EKF!!!!!

LOG_S200,
LOG_S201,
LOG_S202,
LOG_S200_BASE(LOG_S200),\
LOG_S201_BASE(LOG_S201),\
LOG_S202_BASE(LOG_S202),\


===============LOG_FILE_CPP====================

void AP_Logger::Write_setWindMagStateLearningMode200(
	uint8_t useAirspeed,
	uint8_t assume_zero_sideslip,
	uint8_t onGround,
	int32_t PV_AidingMode,
	uint8_t inhibitWindStates,
	uint8_t yawAlignComplete,
	uint8_t useAirspeed,
	float accNavMagHoriz,
	uint8_t manoeuvring,
	uint8_t effective_magCal,
	uint8_t use_compass,
	uint8_t inhibitMagStates,
	uint8_t setMagInhibit,
	uint8_t magFieldLearned,
	float earthMagFieldVar_x)
{
	struct log_S200 pkt = {
		LOG_PACKET_HEADER_INIT(LOG_S200),
		time_us : AP_HAL::micros64(),
		useAirspeed : useAirspeed,
		assume_zero_sideslip : assume_zero_sideslip,
		onGround : onGround,
		PV_AidingMode : PV_AidingMode,
		inhibitWindStates : inhibitWindStates,
		yawAlignComplete : yawAlignComplete,
		useAirspeed : useAirspeed,
		accNavMagHoriz : accNavMagHoriz,
		manoeuvring : manoeuvring,
		effective_magCal : effective_magCal,
		use_compass : use_compass,
		inhibitMagStates : inhibitMagStates,
		setMagInhibit : setMagInhibit,
		magFieldLearned : magFieldLearned,
		earthMagFieldVar_x : earthMagFieldVar_x
	};
	WriteBlock(&pkt, sizeof(pkt));
} 

void AP_Logger::Write_setWindMagStateLearningMode201(
	float earthMagFieldVar_y,
	float earthMagFieldVar_z,
	float bodyMagFieldVar_x,
	float bodyMagFieldVar_y,
	float bodyMagFieldVar_z,
	uint8_t magStateInitComplete,
	uint8_t inFlight,
	uint8_t finalInflightYawInit,
	int32_t stateIndexLim,
	int32_t stateIndexLim2,
	uint8_t finalInflightMagInit,
	float tempEuler_x,
	float tempEuler_y,
	float tempEuler_z,
	float tasDataDelayed_tas)
{
	struct log_S201 pkt = {
		LOG_PACKET_HEADER_INIT(LOG_S201),
		time_us : AP_HAL::micros64(),
		earthMagFieldVar_y : earthMagFieldVar_y,
		earthMagFieldVar_z : earthMagFieldVar_z,
		bodyMagFieldVar_x : bodyMagFieldVar_x,
		bodyMagFieldVar_y : bodyMagFieldVar_y,
		bodyMagFieldVar_z : bodyMagFieldVar_z,
		magStateInitComplete : magStateInitComplete,
		inFlight : inFlight,
		finalInflightYawInit : finalInflightYawInit,
		stateIndexLim : stateIndexLim,
		stateIndexLim2 : stateIndexLim2,
		finalInflightMagInit : finalInflightMagInit,
		tempEuler_x : tempEuler_x,
		tempEuler_y : tempEuler_y,
		tempEuler_z : tempEuler_z,
		tasDataDelayed_tas : tasDataDelayed_tas
	};
	WriteBlock(&pkt, sizeof(pkt));
} 

void AP_Logger::Write_setWindMagStateLearningMode202(
	uint8_t magCalRequested,
	uint8_t magCalDenied,
	float dtEkfAvg,
	float MagDeclination,
	float SumP,
	float SumPAfterDecl)
{
	struct log_S202 pkt = {
		LOG_PACKET_HEADER_INIT(LOG_S202),
		time_us : AP_HAL::micros64(),
		magCalRequested : magCalRequested,
		magCalDenied : magCalDenied,
		dtEkfAvg : dtEkfAvg,
		MagDeclination : MagDeclination,
		SumP : SumP,
		SumPAfterDecl : SumPAfterDecl
	};
	WriteBlock(&pkt, sizeof(pkt));
} 

--------------------------------------------------------------


PARTE DO MATLAB, ALIMENTAR O WORKSPACE COM VARIAVEIS LOGADAS CONVERT_MODELO_LOGS.M

	S200_time = 1e-6*S200(:,2);
	useAirspeed = [S200_time, S200(:,3)];
	assume_zero_sideslip = [S200_time, S200(:,4)];
	onGround = [S200_time, S200(:,5)];
	PV_AidingMode = [S200_time, S200(:,6)];
	inhibitWindStates = [S200_time, S200(:,7)];
	yawAlignComplete = [S200_time, S200(:,8)];
	useAirspeed = [S200_time, S200(:,9)];
	accNavMagHoriz = [S200_time, S200(:,10)];
	manoeuvring = [S200_time, S200(:,11)];
	effective_magCal = [S200_time, S200(:,12)];
	use_compass = [S200_time, S200(:,13)];
	inhibitMagStates = [S200_time, S200(:,14)];
	setMagInhibit = [S200_time, S200(:,15)];
	magFieldLearned = [S200_time, S200(:,16)];
	earthMagFieldVar_x = [S200_time, S200(:,17)];


	S201_time = 1e-6*S201(:,2);
	earthMagFieldVar_y = [S201_time, S201(:,3)];
	earthMagFieldVar_z = [S201_time, S201(:,4)];
	bodyMagFieldVar_x = [S201_time, S201(:,5)];
	bodyMagFieldVar_y = [S201_time, S201(:,6)];
	bodyMagFieldVar_z = [S201_time, S201(:,7)];
	magStateInitComplete = [S201_time, S201(:,8)];
	inFlight = [S201_time, S201(:,9)];
	finalInflightYawInit = [S201_time, S201(:,10)];
	stateIndexLim = [S201_time, S201(:,11)];
	stateIndexLim2 = [S201_time, S201(:,12)];
	finalInflightMagInit = [S201_time, S201(:,13)];
	tempEuler_x = [S201_time, S201(:,14)];
	tempEuler_y = [S201_time, S201(:,15)];
	tempEuler_z = [S201_time, S201(:,16)];
	tasDataDelayed_tas = [S201_time, S201(:,17)];


	S202_time = 1e-6*S202(:,2);
	magCalRequested = [S202_time, S202(:,3)];
	magCalDenied = [S202_time, S202(:,4)];
	dtEkfAvg = [S202_time, S202(:,5)];
	MagDeclination = [S202_time, S202(:,6)];
	SumP = [S202_time, S202(:,7)];
	SumPAfterDecl = [S202_time, S202(:,8)];


